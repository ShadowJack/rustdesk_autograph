name: CI

env:
  LLVM_VERSION: "15.0.6"
  TAG_NAME: "latest"
  # vcpkg version: 2022.05.10
  # for multiarch gcc compatibility
  VCPKG_COMMIT_ID: "14e7bb4ae24616ec54ff6b2f6ef4e8659434ea44"
  VERSION: "1.1.9"
  RS_PUB_KEY: '${{ secrets.RS_PUB_KEY }}'
  RENDEZVOUS_SERVER: '${{ secrets.RENDEZVOUS_SERVER }}'

on:
  workflow_dispatch:
  push:
    branches:
      - autograph.1.1.9
    tags:
      - '*'

jobs:
  build:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: true
      matrix:
        job:
          - { target: i686-pc-windows-msvc, os: windows-2019, rustup_toolchain: stable-i686, platform: 32 }
          - { target: x86_64-pc-windows-msvc, os: windows-2019, rustup_toolchain: stable, platform: 64 }
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Install LLVM and Clang
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import os
          import urllib.request
          import ntpath
          version = "${{ env.LLVM_VERSION }}"
          platform = "${{ matrix.job.platform }}"
          url = f"https://github.com/llvm/llvm-project/releases/download/llvmorg-{version}/LLVM-{version}-win{platform}.exe"
          (archive_path, headers) = urllib.request.urlretrieve(url)
          dst_path = "C:/Program Files/LLVM"
          os.system(f'7z x "{archive_path}" -y -o"{dst_path}"')
          add_path(f"{dst_path}/bin")
          set_env("LLVM_PATH", f"{dst_path}/bin")
          set_env("LIBCLANG_PATH", f"{dst_path}/bin")


    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.job.rustup_toolchain }}
        target: ${{ matrix.job.target }}
        override: true
        profile: minimal # minimal component installation (ie, no documentation)

    - uses: Swatinem/rust-cache@v2
      with:
        prefix-key: ${{ matrix.job.os }}

    - name: Restore from cache and install vcpkg
      uses: lukka/run-vcpkg@v7
      with:
        setupOnly: true
        vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}

    - name: Install vcpkg dependencies
      run: |
        case ${{ matrix.job.target }} in
          i686-pc-windows-msvc) $VCPKG_ROOT/vcpkg install libvpx:x86-windows-static libyuv:x86-windows-static opus:x86-windows-static ;;
          x86_64-pc-windows-msvc) $VCPKG_ROOT/vcpkg install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static ;;
        esac
      shell: bash

    - name: Download Sciter
      uses: jannekem/run-python-script-action@v1
      with:
        script: |
          import os
          import urllib.request
          import ntpath
          platform = "${{ matrix.job.platform }}"
          url = f"https://raw.githubusercontent.com/c-smile/sciter-sdk/master/bin.win/x{platform}/sciter.dll"
          (dll_path, _) = urllib.request.urlretrieve(url)
          os.system(f'mkdir target/${{ matrix.job.target }}/release')
          os.system(f'cp {dll_path} target/${{ matrix.job.target }}/release/sciter.dll')

    - name: Build rustdesk
      run: python3 .\build.py --target=${{ matrix.job.target }}

    - name: Upload Artifacts
      uses: actions/upload-artifact@master
      with:
        name: RustDesk-${{ env.VERSION }}-${{ matrix.job.target }}.exe
        path: |
          ./target/${{ matrix.job.target }}/release/RustDesk-${{ env.VERSION }}-${{ matrix.job.target }}.exe

    - name: Publish Release
      uses: softprops/action-gh-release@v1
      with:
        prerelease: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
          ./target/${{ matrix.job.target }}/release/RustDesk-*.exe
