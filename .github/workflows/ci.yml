name: CI

env:
  # LLVM_VERSION: "15.0.6"
  TAG_NAME: "latest"
  # vcpkg version: 2022.05.10
  # for multiarch gcc compatibility
  VCPKG_COMMIT_ID: '1d4128f08e30cec31b94500840c7eca8ebc579cb'
  VERSION: "1.1.9"
  RS_PUB_KEY: '${{ secrets.RS_PUB_KEY }}'
  RENDEZVOUS_SERVER: '${{ secrets.RENDEZVOUS_SERVER }}'

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
      - autograph.1.1.9
    tags:
      - '*'

jobs:
  build:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: i686-pc-windows-msvc        , os: windows-2019                  }
          - { target: x86_64-pc-windows-msvc      , os: windows-2019                  }
    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Install prerequisites
      shell: bash
      run: |
        case ${{ matrix.job.target }} in
          x86_64-unknown-linux-gnu) sudo apt-get -y update ; sudo apt install -y g++ gcc git curl wget nasm yasm libgtk-3-dev clang libxcb-randr0-dev libxdo-dev libxfixes-dev libxcb-shape0-dev libxcb-xfixes0-dev libasound2-dev libpulse-dev cmake ;;
          # arm-unknown-linux-*) sudo apt-get -y update ; sudo apt-get -y install gcc-arm-linux-gnueabihf ;;
          # aarch64-unknown-linux-gnu) sudo apt-get -y update ; sudo apt-get -y install gcc-aarch64-linux-gnu ;;
        esac

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.job.target }}
        override: true
        profile: minimal # minimal component installation (ie, no documentation)

    - uses: Swatinem/rust-cache@v2
      with:
        prefix-key: ${{ matrix.job.os }}

    - name: Restore from cache and install vcpkg
      uses: lukka/run-vcpkg@v7
      with:
        setupOnly: true
        vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}

    - name: Install vcpkg dependencies
      run: |
        $VCPKG_ROOT/vcpkg install libvpx libyuv opus
      shell: bash

    - name: Build rustdesk
      run: python3 .\build.py

    # - name: Build
    #   uses: actions-rs/cargo@v1
    #   with:
    #     use-cross: ${{ matrix.job.use-cross }}
    #     command: build
    #     args: --locked --release --target=${{ matrix.job.target }}
    #

    - name: Upload Artifacts
      uses: actions/upload-artifact@master
      with:
        name: rustdesk-${{ env.VERSION }}-${{ matrix.job.target }}.exe
        path: |
          ./target/release/RustDesk-${{ env.VERSION }}-putes.exe

    - name: Publish Release
      uses: softprops/action-gh-release@v1
      with:
        prerelease: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
          ./target/release/RustDesk-*.exe
