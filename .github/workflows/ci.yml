name: Release with Sciter

env:
  LLVM_VERSION: "15.0.6"
  TAG_NAME: "latest"
  # vcpkg version: 2022.05.10
  # for multiarch gcc compatibility
  VCPKG_COMMIT_ID: "14e7bb4ae24616ec54ff6b2f6ef4e8659434ea44"
  VERSION: "1.2.0"
  # To make a custom build with your own servers set the below secret values
  RS_PUB_KEY: '${{ secrets.RS_PUB_KEY }}'
  RENDEZVOUS_SERVER: '${{ secrets.RENDEZVOUS_SERVER }}'

on:
  workflow_dispatch:

jobs:

  build:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { target: i686-pc-windows-msvc, os: windows-2019 }
          - { target: x86_64-pc-windows-msvc, os: windows-2019 }
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: ${{ env.LLVM_VERSION }}

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.job.target }}
        override: true
        profile: minimal # minimal component installation (ie, no documentation)

    - uses: Swatinem/rust-cache@v2
      with:
        prefix-key: ${{ matrix.job.os }}

    - name: Restore from cache and install vcpkg
      uses: lukka/run-vcpkg@v7
      with:
        setupOnly: true
        vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}

    - name: Install vcpkg dependencies
      run: |
        case ${{ matrix.job.target }} in
          i686-pc-windows-msvc) $VCPKG_ROOT/vcpkg install libvpx libyuv opus ;;
          x86_64-pc-windows-msvc) $VCPKG_ROOT/vcpkg install libvpx:x64-windows-static libyuv:x64-windows-static opus:x64-windows-static ;;
        esac
      shell: bash

    - name: Build rustdesk
      run: python3 .\build.py --portable --hwcodec

    - name: Build self-extracted executable
      shell: bash
      run: |
        pushd ./libs/portable
        python3 ./generate.py -f ../../target/release/ -o . -e ../../target/release/rustdesk.exe
        popd
        mkdir -p ./SignOutput
        mv ./target/release/rustdesk-portable-packer.exe ./SignOutput/rustdesk-${{ env.VERSION }}-${{ matrix.job.target }}.exe

    - name: Sign rustdesk self-extracted file
      uses: GermanBluefox/code-sign-action@v7
      with:
        certificate: '${{ secrets.WINDOWS_PFX_BASE64 }}'
        password: '${{ secrets.WINDOWS_PFX_PASSWORD }}'
        certificatesha1: '${{ secrets.WINDOWS_PFX_SHA1_THUMBPRINT }}'
        # certificatename: '${{ secrets.WINDOWS_PFX_NAME }}'
        folder: './SignOutput'
        recursive: false

    - name: Upload Artifacts
      uses: actions/upload-artifact@master
      with:
        name: rustdesk-${{ env.VERSION }}-${{ matrix.job.target }}.exe
        path: |
          ./SignOutput/rustdesk-${{ env.VERSION }}-${{ matrix.job.target }}.exe

    - name: Publish Release
      uses: softprops/action-gh-release@v1
      with:
        prerelease: true
        tag_name: ${{ env.TAG_NAME }}
        files: |
          ./SignOutput/rustdesk-*.exe

    # - name: Strip debug information from executable
    #   id: strip
    #   shell: bash
    #   run: |
    #     # Figure out suffix of binary
    #     EXE_suffix=""
    #     case ${{ matrix.job.target }} in
    #       *-pc-windows-*) EXE_suffix=".exe" ;;
    #     esac;

    #     # Figure out what strip tool to use if any
    #     STRIP="strip"
    #     case ${{ matrix.job.target }} in
    #       arm-unknown-linux-*) STRIP="arm-linux-gnueabihf-strip" ;;
    #       aarch64-unknown-linux-gnu) STRIP="aarch64-linux-gnu-strip" ;;
    #       *-pc-windows-msvc) STRIP="" ;;
    #     esac;

    #     # Setup paths
    #     BIN_DIR="${{ env.CICD_INTERMEDIATES_DIR }}/stripped-release-bin/"
    #     mkdir -p "${BIN_DIR}"
    #     BIN_NAME="${{ env.PROJECT_NAME }}${EXE_suffix}"
    #     BIN_PATH="${BIN_DIR}/${BIN_NAME}"

    #     # Copy the release build binary to the result location
    #     cp "target/${{ matrix.job.target }}/release/${BIN_NAME}" "${BIN_DIR}"

    #     # Also strip if possible
    #     if [ -n "${STRIP}" ]; then
    #       "${STRIP}" "${BIN_PATH}"
    #     fi

    #     # Let subsequent steps know where to find the (stripped) bin
    #     echo ::set-output name=BIN_PATH::${BIN_PATH}
    #     echo ::set-output name=BIN_NAME::${BIN_NAME}

    - name: Set testing options
      id: test-options
      shell: bash
      run: |
        # test only library unit tests and binary for arm-type targets
        unset CARGO_TEST_OPTIONS
        unset CARGO_TEST_OPTIONS ; case ${{ matrix.job.target }} in arm-* | aarch64-*) CARGO_TEST_OPTIONS="--lib --bin ${PROJECT_NAME}" ;; esac;
        echo ::set-output name=CARGO_TEST_OPTIONS::${CARGO_TEST_OPTIONS}

    - name: Build tests
      uses: actions-rs/cargo@v1
      with:
        use-cross: ${{ matrix.job.use-cross }}
        command: build
        args: --locked --tests --target=${{ matrix.job.target }}        

    # - name: Run tests
    #   uses: actions-rs/cargo@v1
    #   with:
    #     use-cross: ${{ matrix.job.use-cross }}
    #     command: test
    #     args: --locked --target=${{ matrix.job.target }} ${{ steps.test-options.outputs.CARGO_TEST_OPTIONS}}
